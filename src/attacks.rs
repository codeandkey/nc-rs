use crate::square::*;
use crate::piece::*;

/* Magic numbers for sliding gen */
mod magic {
    pub fn index(rocc: u64, magic: u64, bits: u32) -> usize {
        (rocc.overflowing_mul(magic).0 >> (64 - bits)) as usize
    }

    pub const ROOK: [u64; 64] = [
        0xa8002c000108020u64,
        0x6c00049b0002001u64,
        0x100200010090040u64,
        0x2480041000800801u64,
        0x280028004000800u64,
        0x900410008040022u64,
        0x280020001001080u64,
        0x2880002041000080u64,
        0xa000800080400034u64,
        0x4808020004000u64,
        0x2290802004801000u64,
        0x411000d00100020u64,
        0x402800800040080u64,
        0xb000401004208u64,
        0x2409000100040200u64,
        0x1002100004082u64,
        0x22878001e24000u64,
        0x1090810021004010u64,
        0x801030040200012u64,
        0x500808008001000u64,
        0xa08018014000880u64,
        0x8000808004000200u64,
        0x201008080010200u64,
        0x801020000441091u64,
        0x800080204005u64,
        0x1040200040100048u64,
        0x120200402082u64,
        0xd14880480100080u64,
        0x12040280080080u64,
        0x100040080020080u64,
        0x9020010080800200u64,
        0x813241200148449u64,
        0x491604001800080u64,
        0x100401000402001u64,
        0x4820010021001040u64,
        0x400402202000812u64,
        0x209009005000802u64,
        0x810800601800400u64,
        0x4301083214000150u64,
        0x204026458e001401u64,
        0x40204000808000u64,
        0x8001008040010020u64,
        0x8410820820420010u64,
        0x1003001000090020u64,
        0x804040008008080u64,
        0x12000810020004u64,
        0x1000100200040208u64,
        0x430000a044020001u64,
        0x280009023410300u64,
        0xe0100040002240u64,
        0x200100401700u64,
        0x2244100408008080u64,
        0x8000400801980u64,
        0x2000810040200u64,
        0x8010100228810400u64,
        0x2000009044210200u64,
        0x4080008040102101u64,
        0x40002080411d01u64,
        0x2005524060000901u64,
        0x502001008400422u64,
        0x489a000810200402u64,
        0x1004400080a13u64,
        0x4000011008020084u64,
        0x26002114058042u64,
    ];

    pub const BISHOP: [u64; 64] = [
        0x89a1121896040240u64,
        0x2004844802002010u64,
        0x2068080051921000u64,
        0x62880a0220200808u64,
        0x4042004000000u64,
        0x100822020200011u64,
        0xc00444222012000au64,
        0x28808801216001u64,
        0x400492088408100u64,
        0x201c401040c0084u64,
        0x840800910a0010u64,
        0x82080240060u64,
        0x2000840504006000u64,
        0x30010c4108405004u64,
        0x1008005410080802u64,
        0x8144042209100900u64,
        0x208081020014400u64,
        0x4800201208ca00u64,
        0xf18140408012008u64,
        0x1004002802102001u64,
        0x841000820080811u64,
        0x40200200a42008u64,
        0x800054042000u64,
        0x88010400410c9000u64,
        0x520040470104290u64,
        0x1004040051500081u64,
        0x2002081833080021u64,
        0x400c00c010142u64,
        0x941408200c002000u64,
        0x658810000806011u64,
        0x188071040440a00u64,
        0x4800404002011c00u64,
        0x104442040404200u64,
        0x511080202091021u64,
        0x4022401120400u64,
        0x80c0040400080120u64,
        0x8040010040820802u64,
        0x480810700020090u64,
        0x102008e00040242u64,
        0x809005202050100u64,
        0x8002024220104080u64,
        0x431008804142000u64,
        0x19001802081400u64,
        0x200014208040080u64,
        0x3308082008200100u64,
        0x41010500040c020u64,
        0x4012020c04210308u64,
        0x208220a202004080u64,
        0x111040120082000u64,
        0x6803040141280a00u64,
        0x2101004202410000u64,
        0x8200000041108022u64,
        0x21082088000u64,
        0x2410204010040u64,
        0x40100400809000u64,
        0x822088220820214u64,
        0x40808090012004u64,
        0x910224040218c9u64,
        0x402814422015008u64,
        0x90014004842410u64,
        0x1000042304105u64,
        0x10008830412a00u64,
        0x2520081090008908u64,
        0x40102000a0a60140u64,
    ];
}

pub mod masks {
    pub const ROOK: [u64; 64] = [
        0x101010101017eu64,
        0x202020202027cu64,
        0x404040404047au64,
        0x8080808080876u64,
        0x1010101010106eu64,
        0x2020202020205eu64,
        0x4040404040403eu64,
        0x8080808080807eu64,
        0x1010101017e00u64,
        0x2020202027c00u64,
        0x4040404047a00u64,
        0x8080808087600u64,
        0x10101010106e00u64,
        0x20202020205e00u64,
        0x40404040403e00u64,
        0x80808080807e00u64,
        0x10101017e0100u64,
        0x20202027c0200u64,
        0x40404047a0400u64,
        0x8080808760800u64,
        0x101010106e1000u64,
        0x202020205e2000u64,
        0x404040403e4000u64,
        0x808080807e8000u64,
        0x101017e010100u64,
        0x202027c020200u64,
        0x404047a040400u64,
        0x8080876080800u64,
        0x1010106e101000u64,
        0x2020205e202000u64,
        0x4040403e404000u64,
        0x8080807e808000u64,
        0x1017e01010100u64,
        0x2027c02020200u64,
        0x4047a04040400u64,
        0x8087608080800u64,
        0x10106e10101000u64,
        0x20205e20202000u64,
        0x40403e40404000u64,
        0x80807e80808000u64,
        0x17e0101010100u64,
        0x27c0202020200u64,
        0x47a0404040400u64,
        0x8760808080800u64,
        0x106e1010101000u64,
        0x205e2020202000u64,
        0x403e4040404000u64,
        0x807e8080808000u64,
        0x7e010101010100u64,
        0x7c020202020200u64,
        0x7a040404040400u64,
        0x76080808080800u64,
        0x6e101010101000u64,
        0x5e202020202000u64,
        0x3e404040404000u64,
        0x7e808080808000u64,
        0x7e01010101010100u64,
        0x7c02020202020200u64,
        0x7a04040404040400u64,
        0x7608080808080800u64,
        0x6e10101010101000u64,
        0x5e20202020202000u64,
        0x3e40404040404000u64,
        0x7e80808080808000u64,
    ];
    pub const BISHOP: [u64; 64] = [
        0x40201008040200u64,
        0x402010080400u64,
        0x4020100a00u64,
        0x40221400u64,
        0x2442800u64,
        0x204085000u64,
        0x20408102000u64,
        0x2040810204000u64,
        0x20100804020000u64,
        0x40201008040000u64,
        0x4020100a0000u64,
        0x4022140000u64,
        0x244280000u64,
        0x20408500000u64,
        0x2040810200000u64,
        0x4081020400000u64,
        0x10080402000200u64,
        0x20100804000400u64,
        0x4020100a000a00u64,
        0x402214001400u64,
        0x24428002800u64,
        0x2040850005000u64,
        0x4081020002000u64,
        0x8102040004000u64,
        0x8040200020400u64,
        0x10080400040800u64,
        0x20100a000a1000u64,
        0x40221400142200u64,
        0x2442800284400u64,
        0x4085000500800u64,
        0x8102000201000u64,
        0x10204000402000u64,
        0x4020002040800u64,
        0x8040004081000u64,
        0x100a000a102000u64,
        0x22140014224000u64,
        0x44280028440200u64,
        0x8500050080400u64,
        0x10200020100800u64,
        0x20400040201000u64,
        0x2000204081000u64,
        0x4000408102000u64,
        0xa000a10204000u64,
        0x14001422400000u64,
        0x28002844020000u64,
        0x50005008040200u64,
        0x20002010080400u64,
        0x40004020100800u64,
        0x20408102000u64,
        0x40810204000u64,
        0xa1020400000u64,
        0x142240000000u64,
        0x284402000000u64,
        0x500804020000u64,
        0x201008040200u64,
        0x402010080400u64,
        0x2040810204000u64,
        0x4081020400000u64,
        0xa102040000000u64,
        0x14224000000000u64,
        0x28440200000000u64,
        0x50080402000000u64,
        0x20100804020000u64,
        0x40201008040200u64,
    ];
}

mod bits {
    pub const ROOK: [u32; 64] = [
        12, 11, 11, 11, 11, 11, 11, 12,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        11, 10, 10, 10, 10, 10, 10, 11,
        12, 11, 11, 11, 11, 11, 11, 12,
    ];

    pub const BISHOP: [u32; 64] = [
        6, 5, 5, 5, 5, 5, 5, 6,
        5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 7, 7, 7, 7, 5, 5,
        5, 5, 7, 9, 9, 7, 5, 5,
        5, 5, 7, 9, 9, 7, 5, 5,
        5, 5, 7, 7, 7, 7, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5,
        6, 5, 5, 5, 5, 5, 5, 6,
    ];
}

mod tables {
    use super::*;

    pub const PAWNS: [[u64; 64]; 2] = [[
        0x280,
        0x500,
        0xa00,
        0x1400,
        0x2800,
        0x5000,
        0xa000,
        0x14000,
        0x28000,
        0x50000,
        0xa0000,
        0x140000,
        0x280000,
        0x500000,
        0xa00000,
        0x1400000,
        0x2800000,
        0x5000000,
        0xa000000,
        0x14000000,
        0x28000000,
        0x50000000,
        0xa0000000,
        0x140000000,
        0x280000000,
        0x500000000,
        0xa00000000,
        0x1400000000,
        0x2800000000,
        0x5000000000,
        0xa000000000,
        0x14000000000,
        0x28000000000,
        0x50000000000,
        0xa0000000000,
        0x140000000000,
        0x280000000000,
        0x500000000000,
        0xa00000000000,
        0x1400000000000,
        0x2800000000000,
        0x5000000000000,
        0xa000000000000,
        0x14000000000000,
        0x28000000000000,
        0x50000000000000,
        0xa0000000000000,
        0x140000000000000,
        0x280000000000000,
        0x500000000000000,
        0xa00000000000000,
        0x1400000000000000,
        0x2800000000000000,
        0x5000000000000000,
        0xa000000000000000,
        0x4000000000000000,
        0x0,
        0x0,
        0x0,
        0x0,
        0x0,
        0x0,
        0x0,
        0x0,
    ], [
        0x0,
        0x0,
        0x0,
        0x0,
        0x0,
        0x0,
        0x0,
        0x0,
        0x2,
        0x5,
        0xa,
        0x14,
        0x28,
        0x50,
        0xa0,
        0x140,
        0x280,
        0x500,
        0xa00,
        0x1400,
        0x2800,
        0x5000,
        0xa000,
        0x14000,
        0x28000,
        0x50000,
        0xa0000,
        0x140000,
        0x280000,
        0x500000,
        0xa00000,
        0x1400000,
        0x2800000,
        0x5000000,
        0xa000000,
        0x14000000,
        0x28000000,
        0x50000000,
        0xa0000000,
        0x140000000,
        0x280000000,
        0x500000000,
        0xa00000000,
        0x1400000000,
        0x2800000000,
        0x5000000000,
        0xa000000000,
        0x14000000000,
        0x28000000000,
        0x50000000000,
        0xa0000000000,
        0x140000000000,
        0x280000000000,
        0x500000000000,
        0xa00000000000,
        0x1400000000000,
        0x2800000000000,
        0x5000000000000,
        0xa000000000000,
        0x14000000000000,
        0x28000000000000,
        0x50000000000000,
        0xa0000000000000,
        0x140000000000000,
    ]];
    pub const KNIGHTS: [u64; 64] = [
        0x20400,
        0x50800,
        0xa1100,
        0x142200,
        0x284400,
        0x508800,
        0xa01000,
        0x402000,
        0x2040004,
        0x5080008,
        0xa110011,
        0x14220022,
        0x28440044,
        0x50880088,
        0xa0100010,
        0x40200020,
        0x204000402,
        0x508000805,
        0xa1100110a,
        0x1422002214,
        0x2844004428,
        0x5088008850,
        0xa0100010a0,
        0x4020002040,
        0x20400040200,
        0x50800080500,
        0xa1100110a00,
        0x142200221400,
        0x284400442800,
        0x508800885000,
        0xa0100010a000,
        0x402000204000,
        0x2040004020000,
        0x5080008050000,
        0xa1100110a0000,
        0x14220022140000,
        0x28440044280000,
        0x50880088500000,
        0xa0100010a00000,
        0x40200020400000,
        0x204000402000000,
        0x508000805000000,
        0xa1100110a000000,
        0x1422002214000000,
        0x2844004428000000,
        0x5088008850000000,
        0xa0100010a0000000,
        0x4020002040000000,
        0x400040200000000,
        0x800080500000000,
        0x1100110a00000000,
        0x2200221400000000,
        0x4400442800000000,
        0x8800885000000000,
        0x100010a000000000,
        0x2000204000000000,
        0x4020000000000,
        0x8050000000000,
        0x110a0000000000,
        0x22140000000000,
        0x44280000000000,
        0x88500000000000,
        0x10a00000000000,
        0x20400000000000,
    ];
    pub const KINGS: [u64; 64] = [
        0x302,
        0x705,
        0xe0a,
        0x1c14,
        0x3828,
        0x7050,
        0xe0a0,
        0xc040,
        0x30203,
        0x70507,
        0xe0a0e,
        0x1c141c,
        0x382838,
        0x705070,
        0xe0a0e0,
        0xc040c0,
        0x3020300,
        0x7050700,
        0xe0a0e00,
        0x1c141c00,
        0x38283800,
        0x70507000,
        0xe0a0e000,
        0xc040c000,
        0x302030000,
        0x705070000,
        0xe0a0e0000,
        0x1c141c0000,
        0x3828380000,
        0x7050700000,
        0xe0a0e00000,
        0xc040c00000,
        0x30203000000,
        0x70507000000,
        0xe0a0e000000,
        0x1c141c000000,
        0x382838000000,
        0x705070000000,
        0xe0a0e0000000,
        0xc040c0000000,
        0x3020300000000,
        0x7050700000000,
        0xe0a0e00000000,
        0x1c141c00000000,
        0x38283800000000,
        0x70507000000000,
        0xe0a0e000000000,
        0xc040c000000000,
        0x302030000000000,
        0x705070000000000,
        0xe0a0e0000000000,
        0x1c141c0000000000,
        0x3828380000000000,
        0x7050700000000000,
        0xe0a0e00000000000,
        0xc040c00000000000,
        0x203000000000000,
        0x507000000000000,
        0xa0e000000000000,
        0x141c000000000000,
        0x2838000000000000,
        0x5070000000000000,
        0xa0e0000000000000,
        0x40c0000000000000,
    ];

    lazy_static! {
        pub static ref ROOK: [Vec<u64>; 64] = generate_rook_tables();
        pub static ref BISHOP: [Vec<u64>; 64] = generate_bishop_tables();
    }
}

pub fn generate_rook_tables() -> [Vec<u64>; 64] {
    let mut output: [Vec<u64>; 64] = arr![Vec::new(); 64];

    for sq in 0..64 {
        let src_f: i32 = sq as i32 % 8;
        let src_r: i32 = sq as i32 / 8;

        output[sq].resize(1 << bits::ROOK[sq], 0u64);

        for i in 0..(1 << bits::ROOK[sq]) {
            let rocc: u64 = make_rocc(i, masks::ROOK[sq], bits::ROOK[sq]);
            let mindex: usize = magic::index(rocc, magic::ROOK[sq], bits::ROOK[sq]);

            assert!(output[sq][mindex] == 0u64);

            /* West */
            for f in (0..src_f).rev() {
                let mask: u64 = 1u64 << (src_r * 8 + f);
                output[sq][mindex] |= mask;

                if rocc & mask != 0u64 {
                    break;
                }
            }

            /* East */
            for f in (src_f + 1)..8 {
                let mask: u64 = 1u64 << (src_r * 8 + f);
                output[sq][mindex] |= mask;

                if rocc & mask != 0u64 {
                    break;
                }
            }

            /* North */
            for r in (src_r + 1)..8 {
                let mask: u64 = 1u64 << (r * 8 + src_f);
                output[sq][mindex] |= mask;

                if rocc & mask != 0u64 {
                    break;
                }
            }

            /* South */
            for r in (0..src_r).rev() {
                let mask: u64 = 1u64 << (r * 8 + src_f);
                output[sq][mindex] |= mask;

                if rocc & mask != 0u64 {
                    break;
                }
            }
        }
    }

    output
}

pub fn generate_bishop_tables() -> [Vec<u64>; 64] {
    let mut output: [Vec<u64>; 64] = arr![Vec::new(); 64];

    for sq in 0..64 {
        let src_f: i32 = sq as i32 % 8;
        let src_r: i32 = sq as i32 / 8;

        output[sq].resize(1 << bits::BISHOP[sq], 0u64);

        for i in 0..(1 << bits::BISHOP[sq]) {
            let rocc: u64 = make_rocc(i, masks::BISHOP[sq], bits::BISHOP[sq]);
            let mindex: usize = magic::index(rocc, magic::BISHOP[sq], bits::BISHOP[sq]);

            assert!(output[sq][mindex] == 0u64);

            /* Northeast */
            for d in 0..8 {
                if src_r + d > 7 || src_f + d > 7 {
                    break;
                }

                let mask: u64 = 1u64 << ((src_r + d) * 8 + src_f + d);
                output[sq][mindex] |= mask;

                if rocc & mask != 0u64 {
                    break;
                }
            }

            /* Northwest */
            for d in 0..8 {
                if src_r + d > 7 || src_f - d < 0 {
                    break;
                }

                let mask: u64 = 1u64 << ((src_r + d) * 8 + src_f - d);
                output[sq][mindex] |= mask;

                if rocc & mask != 0u64 {
                    break;
                }
            }

            /* Southeast */
            for d in 0..8 {
                if src_r - d < 0 || src_f + d > 7 {
                    break;
                }

                let mask: u64 = 1u64 << ((src_r - d) * 8 + src_f + d);
                output[sq][mindex] |= mask;

                if rocc & mask != 0u64 {
                    break;
                }
            }

            /* Southwest */
            for d in 0..8 {
                if src_r - d < 0 || src_f - d < 0 {
                    break;
                }

                let mask: u64 = 1u64 << ((src_r - d) * 8 + src_f - d);
                output[sq][mindex] |= mask;

                if rocc & mask != 0u64 {
                    break;
                }
            }
        }
    }

    output
}

/* Allows for iteration over relevant occupancies in order. */
fn make_rocc(index: u32, mask: u64, bits: u32) -> u64 {
    let mut output: u64 = 0;

    for i in 0..bits {
		if (index >> i) as u32 & 1 != 0 {
			/* The ith bit in mask should be passed to result. */

            let mut cbit: i32 = -1;
            for maskpos in 0..64 {
				if (mask >> maskpos) & 1 != 0 {
                    cbit += 1;

					if cbit == i as i32 {
						/* Pass this bit on! */
						output |= 1u64 << maskpos;
					}
				}
			}
		}
	}

    return output;
}

pub fn pawn(c: Color, s: Square) -> u64 {
    tables::PAWNS[c as usize][s.index()]
}

pub fn bishop(s: Square, occ: u64) -> u64 {
    tables::BISHOP[s.index()][magic::index(occ & masks::BISHOP[s.index()], magic::BISHOP[s.index()], bits::BISHOP[s.index()])]
}

pub fn knight(s: Square) -> u64 {
    tables::KNIGHTS[s.index()]
}

pub fn rook(s: Square, occ: u64) -> u64 {
    tables::ROOK[s.index()][magic::index(occ & masks::ROOK[s.index()], magic::ROOK[s.index()], bits::ROOK[s.index()])]
}

pub fn queen(s: Square, occ: u64) -> u64 {
    bishop(s, occ) | rook(s, occ)
}

pub fn king(s: Square) -> u64 {
    tables::KINGS[s.index()]
}

const fn get_i32() -> i32 {
    return 0;
}

static t: i32 = get_i32();